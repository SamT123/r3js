% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/3JSpoints.R
\name{points3js}
\alias{points3js}
\title{Add points to a data3js object}
\usage{
points3js(
  data3js,
  x,
  y,
  z,
  size = 1,
  col = "black",
  pch = 16,
  highlight,
  geometry = TRUE,
  label = NULL,
  toggle = NULL,
  ...
)
}
\arguments{
\item{data3js}{The data3js object}

\item{x}{point x coords}

\item{y}{point y coords}

\item{z}{point z coords}

\item{size}{point sizes}

\item{col}{point colors}

\item{pch}{point types}

\item{highlight}{highlight characteristics (see `highlight3ks()`)}

\item{geometry}{logical, should the point be rendered as a physical geometry}

\item{label}{optional vector of interactive labels to apply to the points (see `highlight3ks()`)}

\item{toggle}{optional vector of interactive toggles associate to each point (see `highlight3ks()`)}

\item{...}{further parameters to pass to `material3js()`}
}
\description{
This is the base function for adding points to a plot. Alongside other parameters
you will need to decide whether you want the points plotted as physical geometries
(geometry = TRUE) or webgl points rendered with a shader (geometry = FALSE). Points
rendered as geometries use `geopoint3js()` and will respect lighting and intersect
properly, also more point types are supported but come at a larger computational
cost of rendering. webgl points use `glpoints3js()` and are rendered orders of
magnitude faster but have less flexible appearances and ignore lighting.
}
